<?php

namespace WabLab\Taxonomy\Test\Unit;

use PHPUnit\Framework\TestCase;
use WabLab\Taxonomy\Contract\Service\IAddTaxonomyService;
use WabLab\Taxonomy\Service\AddTaxonomyService;

class AddTaxonomyServiceTest extends TestCase
{
    protected AddTaxonomyService $service;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->service = new AddTaxonomyService();
    }

    public function testCreatingAddNewServiceObject()
    {
        $this->assertInstanceOf(AddTaxonomyService::class, $this->service);
    }

    public function testThatAddNewServiceImplementsItsRelatedInterface()
    {
        $this->assertInstanceOf(IAddTaxonomyService::class, $this->service);
    }
    
    public function testThatProcessMethodReturnsClassReference() {
        $this->assertInstanceOf(AddTaxonomyService::class, $this->service->input('title', 'this is the title')->process());
    }
    
    public function testInputForRequiredIfTitleDoesNotExistThenThrowException() {
        $this->expectException(\Exception::class);
        $this->expectExceptionMessageMatches('/ title /i');
        $this->service->input('description', 'this is the description')->input('parent_id', 1)->process();
    }
    
    public function testDescriptionInputForRequiredStringOrNullValueThenThrowException() {
        $this->expectException(\Exception::class);
        $this->expectExceptionMessageMatches('/ description /i');
        $this->service->input('description', [])->input('title', 'test title')->process();
    }
    
    public function testParentIdInputForRequiredStringOrNullValueThenThrowException() {
        $this->expectException(\Exception::class);
        $this->expectExceptionMessageMatches('/ parent_id /i');
        $this->service->input('parent_id', [])->input('title', 'test title')->process();
    }
}
